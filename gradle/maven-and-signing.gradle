
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def getSonatypeURL() {
    return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

// sign archives if signatory exists
if (signing.signatory) {

    signing {
        sign configurations.archives
    }

}

uploadArchives {
    repositories {
        mavenDeployer {
            // sign pom if signatory exists
            if (signing.signatory) {
                beforeDeployment {
                    signing.signPom(it)
                }

                repository(url: sonatypeURL) {
                    authentication userName: properties['sonatype.username'], password: properties['sonatype.password']
                }
            }

            pom.project {

                name properties.'pom.name'
                description properties.'pom.description'
                url properties.'pom.url'

                scm {
                    url properties.'pom.scm.url'
                    connection properties.'pom.scm.connection'
                    developerConnection properties.'pom.scm.developer.connection'
                }

                licenses {
                    license {
                        name properties.'pom.license.name'
                        url properties.'pom.license.url'
                        distribution properties.'pom.license.distribution'
                    }
                }

                developers {
                    developer {
                        id properties.'pom.developer.id'
                        name properties.'pom.developer.name'
                    }
                }
            }
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name properties.'pom.license.name'
            url properties.'pom.license.url'
            distribution properties.'pom.license.distribution'
        }
    }

    developers {
        developer {
            id properties.'pom.developer.id'
            name properties.'pom.developer.name'
        }
    }
}

publishing {
    publications {
        my(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode 'name', properties.'pom.name'
                root.appendNode 'description', properties.'pom.description'
                root.appendNode 'url', properties.'pom.url'
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = properties.'bintray.username'
    key = properties.'bintray.apiKey'

    publications = ['my']

    pkg {
        repo = properties.'bintray.repo'
        name = properties.'bintray.name'
        licenses = [properties.'pom.license.name']
    }
}
